{"ast":null,"code":"import axios from 'axios';\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  paramsSerializer: params => params\n});\naxiosClient.interceptors.request.use(async config => {\n  const token = localStorage.getItem('token');\n  const auth = token ? `Bearer ${token}` : '';\n  config.headers.common['Authorization'] = auth;\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/home/ali/Reno-shoe-shop/client/src/api/axiosClient.js"],"names":["axios","axiosClient","create","baseURL","process","env","REACT_APP_API_URL","headers","paramsSerializer","params","interceptors","request","use","config","token","localStorage","getItem","auth","common","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa;AAChCC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADW;AAEhCC,EAAAA,OAAO,EAAE;AACR,oBAAgB;AADR,GAFuB;AAKhCC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYA;AALE,CAAb,CAApB;AAQAR,WAAW,CAACS,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACtD,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,IAAI,GAAGH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAAzC;AACAD,EAAAA,MAAM,CAACN,OAAP,CAAeW,MAAf,CAAsB,eAAtB,IAAyCD,IAAzC;AAEA,SAAOJ,MAAP;AACA,CAND;AAQAZ,WAAW,CAACS,YAAZ,CAAyBS,QAAzB,CAAkCP,GAAlC,CACEO,QAAD,IAAc;AACb,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC9B,WAAOD,QAAQ,CAACC,IAAhB;AACA;;AAED,SAAOD,QAAP;AACA,CAPF,EAQEE,KAAD,IAAW;AACV,QAAMA,KAAN;AACA,CAVF;AAaA,eAAepB,WAAf","sourcesContent":["import axios from 'axios'\n\nconst axiosClient = axios.create({\n\tbaseURL: process.env.REACT_APP_API_URL,\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t},\n\tparamsSerializer: (params) => params,\n})\n\naxiosClient.interceptors.request.use(async (config) => {\n\tconst token = localStorage.getItem('token')\n\tconst auth = token ? `Bearer ${token}` : ''\n\tconfig.headers.common['Authorization'] = auth\n\n\treturn config\n})\n\naxiosClient.interceptors.response.use(\n\t(response) => {\n\t\tif (response && response.data) {\n\t\t\treturn response.data\n\t\t}\n\n\t\treturn response\n\t},\n\t(error) => {\n\t\tthrow error\n\t}\n)\n\nexport default axiosClient\n"]},"metadata":{},"sourceType":"module"}