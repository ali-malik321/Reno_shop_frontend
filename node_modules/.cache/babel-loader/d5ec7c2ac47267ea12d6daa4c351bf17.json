{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport orderAPI from '../../api/orderApi';\nexport const getAllOrder = createAsyncThunk('order/getAllCategory', async (userId, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    return await orderAPI.getAllOrder(userId);\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nexport const getOrder = createAsyncThunk('order/getOrder', async (id, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    return await orderAPI.getOrder(id);\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nexport const addOrder = createAsyncThunk('order/addOrder', async (data, _ref3) => {\n  let {\n    rejectWithValue,\n    dispatch\n  } = _ref3;\n\n  try {\n    const result = await orderAPI.addOrder(data);\n    dispatch(getAllOrder());\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nexport const updateOrder = createAsyncThunk('order/updateOrder', async (data, _ref4) => {\n  let {\n    rejectWithValue,\n    dispatch\n  } = _ref4;\n\n  try {\n    const result = await orderAPI.updateOrder(data);\n    dispatch(getAllOrder());\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nexport const deleteOrder = createAsyncThunk('order/deleteOrder', async (id, _ref5) => {\n  let {\n    rejectWithValue,\n    dispatch\n  } = _ref5;\n\n  try {\n    const result = await orderAPI.deleteOrder(id);\n    dispatch(getAllOrder());\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nconst initialState = {\n  orders: [],\n  ordersLoading: false,\n  order: {},\n  orderLoading: false\n};\nconst orderSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getAllOrder.pending]: state => {\n      state.ordersLoading = true;\n    },\n    [getAllOrder.fulfilled]: (state, action) => {\n      state.ordersLoading = false;\n      state.orders = action.payload.orders;\n    }\n  }\n});\nexport default orderSlice.reducer;","map":{"version":3,"sources":["/home/ali/Reno-shoe-shop-frontend/client/src/redux/slices/orderSlice.js"],"names":["createAsyncThunk","createSlice","orderAPI","getAllOrder","userId","rejectWithValue","error","response","getOrder","id","addOrder","data","dispatch","result","updateOrder","deleteOrder","initialState","orders","ordersLoading","order","orderLoading","orderSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport orderAPI from '../../api/orderApi'\n\nexport const getAllOrder = createAsyncThunk(\n\t'order/getAllCategory',\n\tasync (userId, { rejectWithValue }) => {\n\t\ttry {\n\t\t\treturn await orderAPI.getAllOrder(userId)\n\t\t} catch (error) {\n\t\t\treturn rejectWithValue(error.response)\n\t\t}\n\t}\n)\n\nexport const getOrder = createAsyncThunk(\n\t'order/getOrder',\n\tasync (id, { rejectWithValue }) => {\n\t\ttry {\n\t\t\treturn await orderAPI.getOrder(id)\n\t\t} catch (error) {\n\t\t\treturn rejectWithValue(error.response)\n\t\t}\n\t}\n)\n\nexport const addOrder = createAsyncThunk(\n\t'order/addOrder',\n\tasync (data, { rejectWithValue, dispatch }) => {\n\t\ttry {\n\t\t\tconst result = await orderAPI.addOrder(data)\n\n\t\t\tdispatch(getAllOrder())\n\n\t\t\treturn result\n\t\t} catch (error) {\n\t\t\treturn rejectWithValue(error.response)\n\t\t}\n\t}\n)\n\nexport const updateOrder = createAsyncThunk(\n\t'order/updateOrder',\n\tasync (data, { rejectWithValue, dispatch }) => {\n\t\ttry {\n\t\t\tconst result = await orderAPI.updateOrder(data)\n\n\t\t\tdispatch(getAllOrder())\n\n\t\t\treturn result\n\t\t} catch (error) {\n\t\t\treturn rejectWithValue(error.response)\n\t\t}\n\t}\n)\n\nexport const deleteOrder = createAsyncThunk(\n\t'order/deleteOrder',\n\tasync (id, { rejectWithValue, dispatch }) => {\n\t\ttry {\n\t\t\tconst result = await orderAPI.deleteOrder(id)\n\n\t\t\tdispatch(getAllOrder())\n\n\t\t\treturn result\n\t\t} catch (error) {\n\t\t\treturn rejectWithValue(error.response)\n\t\t}\n\t}\n)\n\nconst initialState = {\n\torders: [],\n\tordersLoading: false,\n\torder: {},\n\torderLoading: false,\n}\n\nconst orderSlice = createSlice({\n\tname: 'order',\n\tinitialState,\n\treducers: {},\n\textraReducers: {\n\t\t[getAllOrder.pending]: (state) => {\n\t\t\tstate.ordersLoading = true\n\t\t},\n\t\t[getAllOrder.fulfilled]: (state, action) => {\n\t\t\tstate.ordersLoading = false\n\t\t\tstate.orders = action.payload.orders\n\t\t},\n\t},\n})\n\nexport default orderSlice.reducer\n"]},"metadata":{},"sourceType":"module"}